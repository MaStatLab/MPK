{
    "contents" : "\n# set a random seed to generate consistent data sets for testing\nset.seed(123)\n\n# number of events to create for each cluster\nn_events_clusterA = 500\nn_events_clusterB = 500\n\n# number of columns in our data sets\nn_parameters = 2\n\n# generate 1st data set\nclusterA_events = matrix(rnorm( n_events_clusterA * n_parameters), ncol = n_parameters)\nclusterB_events = matrix(rnorm( n_events_clusterA * n_parameters) + 10, ncol = n_parameters)\ndata_set_1 = rbind(clusterA_events, clusterB_events)\n\n# generate 2nd data set\nclusterA_events = matrix(rnorm( n_events_clusterA * n_parameters), ncol = n_parameters)\nclusterB_events = matrix(rnorm( n_events_clusterA * n_parameters) + 8, ncol = n_parameters)\ndata_set_2 = rbind(clusterA_events, clusterB_events)\n\n# shuffle the data sets\ndata_set_1 = data_set_1[sample(nrow(data_set_1)),]\ndata_set_2 = data_set_2[sample(nrow(data_set_2)),]\n\n# combine data sets into 1 matrix\nY = rbind(data_set_1, data_set_2)\n\n# map for identifying the data set for each event\nC = c(rep(1, nrow(data_set_1)), rep(2, nrow(data_set_2)))\n\n# define our clustering parameters\nmcmc = list(nburn = 500, nsave = 500, nskip = 1, ndisplay = 1000, seed = 5)\n\nans = mpk(Y, C, mcmc = mcmc)\n\nstate = get_final_state(ans)\n\nans = mpk(Y, C, mcmc = mcmc, state = state)\n\ncal = calibrate(ans)\n\npar(mfrow=c(1,2))\nplot(Y, col = C, pch=20, cex=0.5)\nplot(cal$Y_cal, col = C, pch=20, cex=0.5)\n\npar(mfrow=c(1,1))\nplot.ts(ans$chain$epsilon[,1])\n\npar(mfrow=c(1,1))\nplot.ts(ans$chain$epsilon0)\n\npar(mfrow=c(2,2))\nhist(ans$chain$epsilon[,1], nclass=100)\nhist(ans$chain$epsilon[,2], nclass=100)\nhist(ans$chain$epsilon[,4], nclass=100)\nhist(ans$chain$epsilon[,5], nclass=100)\n\n\ntable(ans$chain$Z[5000,])\ntable(ans$chain$Z[4000,])\ntable(ans$chain$Z[3000,])\ntable(ans$chain$Z[2000,])\ntable(ans$chain$Z[1000,])\n\n\nmed_log_odds = apply(ans$chain$logOdds, 1, median)\npar(mfrow=c(1,1))\nhist(med_log_odds, nclass=100)\n\nmed_tmp = matrix(NA, nrow = nrow(ans$data$Y), ncol = ans$mcmc$nsave)\nfor( it in 1: ans$mcmc$nsave)\n  med_tmp[,it] = ans$chain$epsilon[it,ans$chain$Z[it,] ]\nmed_epsilons = apply(med_tmp, 1, median)\npar(mfrow=c(1,1))\nhist(med_epsilons)\n\n",
    "created" : 1430412941789.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2138575155",
    "id" : "6ABBB5D7",
    "lastKnownWriteTime" : 1430518763,
    "path" : "~/Dropbox/Duke/Thesis/locally_tied_stick_breaking/code/V7/MPK/MPK/examples/example2.R",
    "project_path" : "examples/example2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}